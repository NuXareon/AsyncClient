// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: protobuf/BookLibraryService.proto
// Original file comments:
// protoc --cpp_out=AsyncClient\ --go_out=server\ protobuf\BookLibraryService.proto
//
#ifndef GRPC_protobuf_2fBookLibraryService_2eproto__INCLUDED
#define GRPC_protobuf_2fBookLibraryService_2eproto__INCLUDED

#include "protobuf/BookLibraryService.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace BookService {

class BookLibrary final {
 public:
  static constexpr char const* service_full_name() {
    return "BookService.BookLibrary";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetBookStatus(::grpc::ClientContext* context, const ::BookService::BookId& request, ::BookService::BookState* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BookService::BookState>> AsyncGetBookStatus(::grpc::ClientContext* context, const ::BookService::BookId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BookService::BookState>>(AsyncGetBookStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BookService::BookState>> PrepareAsyncGetBookStatus(::grpc::ClientContext* context, const ::BookService::BookId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BookService::BookState>>(PrepareAsyncGetBookStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::BookService::Location>> GetAllBookLocations(::grpc::ClientContext* context, const ::BookService::BookId& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::BookService::Location>>(GetAllBookLocationsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::BookService::Location>> AsyncGetAllBookLocations(::grpc::ClientContext* context, const ::BookService::BookId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::BookService::Location>>(AsyncGetAllBookLocationsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::BookService::Location>> PrepareAsyncGetAllBookLocations(::grpc::ClientContext* context, const ::BookService::BookId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::BookService::Location>>(PrepareAsyncGetAllBookLocationsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetBookStatus(::grpc::ClientContext* context, const ::BookService::BookId* request, ::BookService::BookState* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBookStatus(::grpc::ClientContext* context, const ::BookService::BookId* request, ::BookService::BookState* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAllBookLocations(::grpc::ClientContext* context, const ::BookService::BookId* request, ::grpc::ClientReadReactor< ::BookService::Location>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BookService::BookState>* AsyncGetBookStatusRaw(::grpc::ClientContext* context, const ::BookService::BookId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BookService::BookState>* PrepareAsyncGetBookStatusRaw(::grpc::ClientContext* context, const ::BookService::BookId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::BookService::Location>* GetAllBookLocationsRaw(::grpc::ClientContext* context, const ::BookService::BookId& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::BookService::Location>* AsyncGetAllBookLocationsRaw(::grpc::ClientContext* context, const ::BookService::BookId& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::BookService::Location>* PrepareAsyncGetAllBookLocationsRaw(::grpc::ClientContext* context, const ::BookService::BookId& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetBookStatus(::grpc::ClientContext* context, const ::BookService::BookId& request, ::BookService::BookState* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BookService::BookState>> AsyncGetBookStatus(::grpc::ClientContext* context, const ::BookService::BookId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BookService::BookState>>(AsyncGetBookStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BookService::BookState>> PrepareAsyncGetBookStatus(::grpc::ClientContext* context, const ::BookService::BookId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BookService::BookState>>(PrepareAsyncGetBookStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::BookService::Location>> GetAllBookLocations(::grpc::ClientContext* context, const ::BookService::BookId& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::BookService::Location>>(GetAllBookLocationsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::BookService::Location>> AsyncGetAllBookLocations(::grpc::ClientContext* context, const ::BookService::BookId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::BookService::Location>>(AsyncGetAllBookLocationsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::BookService::Location>> PrepareAsyncGetAllBookLocations(::grpc::ClientContext* context, const ::BookService::BookId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::BookService::Location>>(PrepareAsyncGetAllBookLocationsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetBookStatus(::grpc::ClientContext* context, const ::BookService::BookId* request, ::BookService::BookState* response, std::function<void(::grpc::Status)>) override;
      void GetBookStatus(::grpc::ClientContext* context, const ::BookService::BookId* request, ::BookService::BookState* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAllBookLocations(::grpc::ClientContext* context, const ::BookService::BookId* request, ::grpc::ClientReadReactor< ::BookService::Location>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::BookService::BookState>* AsyncGetBookStatusRaw(::grpc::ClientContext* context, const ::BookService::BookId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::BookService::BookState>* PrepareAsyncGetBookStatusRaw(::grpc::ClientContext* context, const ::BookService::BookId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::BookService::Location>* GetAllBookLocationsRaw(::grpc::ClientContext* context, const ::BookService::BookId& request) override;
    ::grpc::ClientAsyncReader< ::BookService::Location>* AsyncGetAllBookLocationsRaw(::grpc::ClientContext* context, const ::BookService::BookId& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::BookService::Location>* PrepareAsyncGetAllBookLocationsRaw(::grpc::ClientContext* context, const ::BookService::BookId& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetBookStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllBookLocations_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetBookStatus(::grpc::ServerContext* context, const ::BookService::BookId* request, ::BookService::BookState* response);
    virtual ::grpc::Status GetAllBookLocations(::grpc::ServerContext* context, const ::BookService::BookId* request, ::grpc::ServerWriter< ::BookService::Location>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBookStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBookStatus() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetBookStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBookStatus(::grpc::ServerContext* /*context*/, const ::BookService::BookId* /*request*/, ::BookService::BookState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBookStatus(::grpc::ServerContext* context, ::BookService::BookId* request, ::grpc::ServerAsyncResponseWriter< ::BookService::BookState>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllBookLocations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllBookLocations() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetAllBookLocations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllBookLocations(::grpc::ServerContext* /*context*/, const ::BookService::BookId* /*request*/, ::grpc::ServerWriter< ::BookService::Location>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllBookLocations(::grpc::ServerContext* context, ::BookService::BookId* request, ::grpc::ServerAsyncWriter< ::BookService::Location>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetBookStatus<WithAsyncMethod_GetAllBookLocations<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetBookStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBookStatus() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::BookService::BookId, ::BookService::BookState>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::BookService::BookId* request, ::BookService::BookState* response) { return this->GetBookStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetBookStatus(
        ::grpc::MessageAllocator< ::BookService::BookId, ::BookService::BookState>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::BookService::BookId, ::BookService::BookState>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetBookStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBookStatus(::grpc::ServerContext* /*context*/, const ::BookService::BookId* /*request*/, ::BookService::BookState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBookStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::BookService::BookId* /*request*/, ::BookService::BookState* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAllBookLocations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAllBookLocations() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::BookService::BookId, ::BookService::Location>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::BookService::BookId* request) { return this->GetAllBookLocations(context, request); }));
    }
    ~WithCallbackMethod_GetAllBookLocations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllBookLocations(::grpc::ServerContext* /*context*/, const ::BookService::BookId* /*request*/, ::grpc::ServerWriter< ::BookService::Location>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::BookService::Location>* GetAllBookLocations(
      ::grpc::CallbackServerContext* /*context*/, const ::BookService::BookId* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetBookStatus<WithCallbackMethod_GetAllBookLocations<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetBookStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBookStatus() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetBookStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBookStatus(::grpc::ServerContext* /*context*/, const ::BookService::BookId* /*request*/, ::BookService::BookState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllBookLocations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllBookLocations() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetAllBookLocations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllBookLocations(::grpc::ServerContext* /*context*/, const ::BookService::BookId* /*request*/, ::grpc::ServerWriter< ::BookService::Location>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBookStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBookStatus() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetBookStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBookStatus(::grpc::ServerContext* /*context*/, const ::BookService::BookId* /*request*/, ::BookService::BookState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBookStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllBookLocations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllBookLocations() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetAllBookLocations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllBookLocations(::grpc::ServerContext* /*context*/, const ::BookService::BookId* /*request*/, ::grpc::ServerWriter< ::BookService::Location>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllBookLocations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBookStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBookStatus() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBookStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetBookStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBookStatus(::grpc::ServerContext* /*context*/, const ::BookService::BookId* /*request*/, ::BookService::BookState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBookStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAllBookLocations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAllBookLocations() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetAllBookLocations(context, request); }));
    }
    ~WithRawCallbackMethod_GetAllBookLocations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllBookLocations(::grpc::ServerContext* /*context*/, const ::BookService::BookId* /*request*/, ::grpc::ServerWriter< ::BookService::Location>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetAllBookLocations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBookStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBookStatus() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::BookService::BookId, ::BookService::BookState>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::BookService::BookId, ::BookService::BookState>* streamer) {
                       return this->StreamedGetBookStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBookStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBookStatus(::grpc::ServerContext* /*context*/, const ::BookService::BookId* /*request*/, ::BookService::BookState* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBookStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::BookService::BookId,::BookService::BookState>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetBookStatus<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetAllBookLocations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetAllBookLocations() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::BookService::BookId, ::BookService::Location>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::BookService::BookId, ::BookService::Location>* streamer) {
                       return this->StreamedGetAllBookLocations(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetAllBookLocations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllBookLocations(::grpc::ServerContext* /*context*/, const ::BookService::BookId* /*request*/, ::grpc::ServerWriter< ::BookService::Location>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetAllBookLocations(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::BookService::BookId,::BookService::Location>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetAllBookLocations<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetBookStatus<WithSplitStreamingMethod_GetAllBookLocations<Service > > StreamedService;
};

}  // namespace BookService


#endif  // GRPC_protobuf_2fBookLibraryService_2eproto__INCLUDED
