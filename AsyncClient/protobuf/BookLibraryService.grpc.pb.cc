// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: protobuf/BookLibraryService.proto

#include "protobuf/BookLibraryService.pb.h"
#include "protobuf/BookLibraryService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace BookService {

static const char* BookLibrary_method_names[] = {
  "/BookService.BookLibrary/GetBookStatus",
  "/BookService.BookLibrary/GetAllBookLocations",
};

std::unique_ptr< BookLibrary::Stub> BookLibrary::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BookLibrary::Stub> stub(new BookLibrary::Stub(channel, options));
  return stub;
}

BookLibrary::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetBookStatus_(BookLibrary_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllBookLocations_(BookLibrary_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status BookLibrary::Stub::GetBookStatus(::grpc::ClientContext* context, const ::BookService::BookId& request, ::BookService::BookState* response) {
  return ::grpc::internal::BlockingUnaryCall< ::BookService::BookId, ::BookService::BookState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBookStatus_, context, request, response);
}

void BookLibrary::Stub::async::GetBookStatus(::grpc::ClientContext* context, const ::BookService::BookId* request, ::BookService::BookState* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::BookService::BookId, ::BookService::BookState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBookStatus_, context, request, response, std::move(f));
}

void BookLibrary::Stub::async::GetBookStatus(::grpc::ClientContext* context, const ::BookService::BookId* request, ::BookService::BookState* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBookStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::BookService::BookState>* BookLibrary::Stub::PrepareAsyncGetBookStatusRaw(::grpc::ClientContext* context, const ::BookService::BookId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::BookService::BookState, ::BookService::BookId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBookStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::BookService::BookState>* BookLibrary::Stub::AsyncGetBookStatusRaw(::grpc::ClientContext* context, const ::BookService::BookId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBookStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::BookService::Location>* BookLibrary::Stub::GetAllBookLocationsRaw(::grpc::ClientContext* context, const ::BookService::BookId& request) {
  return ::grpc::internal::ClientReaderFactory< ::BookService::Location>::Create(channel_.get(), rpcmethod_GetAllBookLocations_, context, request);
}

void BookLibrary::Stub::async::GetAllBookLocations(::grpc::ClientContext* context, const ::BookService::BookId* request, ::grpc::ClientReadReactor< ::BookService::Location>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::BookService::Location>::Create(stub_->channel_.get(), stub_->rpcmethod_GetAllBookLocations_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::BookService::Location>* BookLibrary::Stub::AsyncGetAllBookLocationsRaw(::grpc::ClientContext* context, const ::BookService::BookId& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::BookService::Location>::Create(channel_.get(), cq, rpcmethod_GetAllBookLocations_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::BookService::Location>* BookLibrary::Stub::PrepareAsyncGetAllBookLocationsRaw(::grpc::ClientContext* context, const ::BookService::BookId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::BookService::Location>::Create(channel_.get(), cq, rpcmethod_GetAllBookLocations_, context, request, false, nullptr);
}

BookLibrary::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BookLibrary_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BookLibrary::Service, ::BookService::BookId, ::BookService::BookState, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BookLibrary::Service* service,
             ::grpc::ServerContext* ctx,
             const ::BookService::BookId* req,
             ::BookService::BookState* resp) {
               return service->GetBookStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BookLibrary_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< BookLibrary::Service, ::BookService::BookId, ::BookService::Location>(
          [](BookLibrary::Service* service,
             ::grpc::ServerContext* ctx,
             const ::BookService::BookId* req,
             ::grpc::ServerWriter<::BookService::Location>* writer) {
               return service->GetAllBookLocations(ctx, req, writer);
             }, this)));
}

BookLibrary::Service::~Service() {
}

::grpc::Status BookLibrary::Service::GetBookStatus(::grpc::ServerContext* context, const ::BookService::BookId* request, ::BookService::BookState* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BookLibrary::Service::GetAllBookLocations(::grpc::ServerContext* context, const ::BookService::BookId* request, ::grpc::ServerWriter< ::BookService::Location>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace BookService

