// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/BookLibraryService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protobuf_2fBookLibraryService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protobuf_2fBookLibraryService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protobuf_2fBookLibraryService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protobuf_2fBookLibraryService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protobuf_2fBookLibraryService_2eproto;
namespace BookService {
class BookId;
struct BookIdDefaultTypeInternal;
extern BookIdDefaultTypeInternal _BookId_default_instance_;
class BookState;
struct BookStateDefaultTypeInternal;
extern BookStateDefaultTypeInternal _BookState_default_instance_;
class Location;
struct LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
}  // namespace BookService
PROTOBUF_NAMESPACE_OPEN
template<> ::BookService::BookId* Arena::CreateMaybeMessage<::BookService::BookId>(Arena*);
template<> ::BookService::BookState* Arena::CreateMaybeMessage<::BookService::BookState>(Arena*);
template<> ::BookService::Location* Arena::CreateMaybeMessage<::BookService::Location>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace BookService {

enum BookStateEnum : int {
  Unavailable = 0,
  Available = 1,
  Reserved = 2,
  BookStateEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BookStateEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BookStateEnum_IsValid(int value);
constexpr BookStateEnum BookStateEnum_MIN = Unavailable;
constexpr BookStateEnum BookStateEnum_MAX = Reserved;
constexpr int BookStateEnum_ARRAYSIZE = BookStateEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BookStateEnum_descriptor();
template<typename T>
inline const std::string& BookStateEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BookStateEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BookStateEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BookStateEnum_descriptor(), enum_t_value);
}
inline bool BookStateEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BookStateEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BookStateEnum>(
    BookStateEnum_descriptor(), name, value);
}
// ===================================================================

class BookId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BookService.BookId) */ {
 public:
  inline BookId() : BookId(nullptr) {}
  ~BookId() override;
  explicit PROTOBUF_CONSTEXPR BookId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BookId(const BookId& from);
  BookId(BookId&& from) noexcept
    : BookId() {
    *this = ::std::move(from);
  }

  inline BookId& operator=(const BookId& from) {
    CopyFrom(from);
    return *this;
  }
  inline BookId& operator=(BookId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BookId& default_instance() {
    return *internal_default_instance();
  }
  static inline const BookId* internal_default_instance() {
    return reinterpret_cast<const BookId*>(
               &_BookId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BookId& a, BookId& b) {
    a.Swap(&b);
  }
  inline void Swap(BookId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BookId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BookId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BookId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BookId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BookId& from) {
    BookId::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BookId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BookService.BookId";
  }
  protected:
  explicit BookId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:BookService.BookId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_2fBookLibraryService_2eproto;
};
// -------------------------------------------------------------------

class BookState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BookService.BookState) */ {
 public:
  inline BookState() : BookState(nullptr) {}
  ~BookState() override;
  explicit PROTOBUF_CONSTEXPR BookState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BookState(const BookState& from);
  BookState(BookState&& from) noexcept
    : BookState() {
    *this = ::std::move(from);
  }

  inline BookState& operator=(const BookState& from) {
    CopyFrom(from);
    return *this;
  }
  inline BookState& operator=(BookState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BookState& default_instance() {
    return *internal_default_instance();
  }
  static inline const BookState* internal_default_instance() {
    return reinterpret_cast<const BookState*>(
               &_BookState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BookState& a, BookState& b) {
    a.Swap(&b);
  }
  inline void Swap(BookState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BookState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BookState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BookState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BookState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BookState& from) {
    BookState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BookState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BookService.BookState";
  }
  protected:
  explicit BookState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 2,
    kUserFieldNumber = 3,
    kStateFieldNumber = 1,
  };
  // repeated string location = 2;
  int location_size() const;
  private:
  int _internal_location_size() const;
  public:
  void clear_location();
  const std::string& location(int index) const;
  std::string* mutable_location(int index);
  void set_location(int index, const std::string& value);
  void set_location(int index, std::string&& value);
  void set_location(int index, const char* value);
  void set_location(int index, const char* value, size_t size);
  std::string* add_location();
  void add_location(const std::string& value);
  void add_location(std::string&& value);
  void add_location(const char* value);
  void add_location(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& location() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_location();
  private:
  const std::string& _internal_location(int index) const;
  std::string* _internal_add_location();
  public:

  // optional string user = 3;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const std::string& user() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user();
  PROTOBUF_NODISCARD std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // .BookService.BookStateEnum state = 1;
  void clear_state();
  ::BookService::BookStateEnum state() const;
  void set_state(::BookService::BookStateEnum value);
  private:
  ::BookService::BookStateEnum _internal_state() const;
  void _internal_set_state(::BookService::BookStateEnum value);
  public:

  // @@protoc_insertion_point(class_scope:BookService.BookState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> location_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
    int state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_2fBookLibraryService_2eproto;
};
// -------------------------------------------------------------------

class Location final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BookService.Location) */ {
 public:
  inline Location() : Location(nullptr) {}
  ~Location() override;
  explicit PROTOBUF_CONSTEXPR Location(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Location(const Location& from);
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Location& operator=(Location&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Location& default_instance() {
    return *internal_default_instance();
  }
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }
  inline void Swap(Location* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Location>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Location& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Location& from) {
    Location::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Location* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BookService.Location";
  }
  protected:
  explicit Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 1,
  };
  // string location = 1;
  void clear_location();
  const std::string& location() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_location(ArgT0&& arg0, ArgT... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // @@protoc_insertion_point(class_scope:BookService.Location)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protobuf_2fBookLibraryService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BookId

// string id = 1;
inline void BookId::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& BookId::id() const {
  // @@protoc_insertion_point(field_get:BookService.BookId.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BookId::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BookService.BookId.id)
}
inline std::string* BookId::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:BookService.BookId.id)
  return _s;
}
inline const std::string& BookId::_internal_id() const {
  return _impl_.id_.Get();
}
inline void BookId::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* BookId::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* BookId::release_id() {
  // @@protoc_insertion_point(field_release:BookService.BookId.id)
  return _impl_.id_.Release();
}
inline void BookId::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BookService.BookId.id)
}

// -------------------------------------------------------------------

// BookState

// .BookService.BookStateEnum state = 1;
inline void BookState::clear_state() {
  _impl_.state_ = 0;
}
inline ::BookService::BookStateEnum BookState::_internal_state() const {
  return static_cast< ::BookService::BookStateEnum >(_impl_.state_);
}
inline ::BookService::BookStateEnum BookState::state() const {
  // @@protoc_insertion_point(field_get:BookService.BookState.state)
  return _internal_state();
}
inline void BookState::_internal_set_state(::BookService::BookStateEnum value) {
  
  _impl_.state_ = value;
}
inline void BookState::set_state(::BookService::BookStateEnum value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:BookService.BookState.state)
}

// repeated string location = 2;
inline int BookState::_internal_location_size() const {
  return _impl_.location_.size();
}
inline int BookState::location_size() const {
  return _internal_location_size();
}
inline void BookState::clear_location() {
  _impl_.location_.Clear();
}
inline std::string* BookState::add_location() {
  std::string* _s = _internal_add_location();
  // @@protoc_insertion_point(field_add_mutable:BookService.BookState.location)
  return _s;
}
inline const std::string& BookState::_internal_location(int index) const {
  return _impl_.location_.Get(index);
}
inline const std::string& BookState::location(int index) const {
  // @@protoc_insertion_point(field_get:BookService.BookState.location)
  return _internal_location(index);
}
inline std::string* BookState::mutable_location(int index) {
  // @@protoc_insertion_point(field_mutable:BookService.BookState.location)
  return _impl_.location_.Mutable(index);
}
inline void BookState::set_location(int index, const std::string& value) {
  _impl_.location_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:BookService.BookState.location)
}
inline void BookState::set_location(int index, std::string&& value) {
  _impl_.location_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:BookService.BookState.location)
}
inline void BookState::set_location(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.location_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BookService.BookState.location)
}
inline void BookState::set_location(int index, const char* value, size_t size) {
  _impl_.location_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BookService.BookState.location)
}
inline std::string* BookState::_internal_add_location() {
  return _impl_.location_.Add();
}
inline void BookState::add_location(const std::string& value) {
  _impl_.location_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BookService.BookState.location)
}
inline void BookState::add_location(std::string&& value) {
  _impl_.location_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:BookService.BookState.location)
}
inline void BookState::add_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.location_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BookService.BookState.location)
}
inline void BookState::add_location(const char* value, size_t size) {
  _impl_.location_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BookService.BookState.location)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BookState::location() const {
  // @@protoc_insertion_point(field_list:BookService.BookState.location)
  return _impl_.location_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BookState::mutable_location() {
  // @@protoc_insertion_point(field_mutable_list:BookService.BookState.location)
  return &_impl_.location_;
}

// optional string user = 3;
inline bool BookState::_internal_has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BookState::has_user() const {
  return _internal_has_user();
}
inline void BookState::clear_user() {
  _impl_.user_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BookState::user() const {
  // @@protoc_insertion_point(field_get:BookService.BookState.user)
  return _internal_user();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BookState::set_user(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.user_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BookService.BookState.user)
}
inline std::string* BookState::mutable_user() {
  std::string* _s = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:BookService.BookState.user)
  return _s;
}
inline const std::string& BookState::_internal_user() const {
  return _impl_.user_.Get();
}
inline void BookState::_internal_set_user(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.user_.Set(value, GetArenaForAllocation());
}
inline std::string* BookState::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.user_.Mutable(GetArenaForAllocation());
}
inline std::string* BookState::release_user() {
  // @@protoc_insertion_point(field_release:BookService.BookState.user)
  if (!_internal_has_user()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.user_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_.IsDefault()) {
    _impl_.user_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BookState::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_.SetAllocated(user, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_.IsDefault()) {
    _impl_.user_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BookService.BookState.user)
}

// -------------------------------------------------------------------

// Location

// string location = 1;
inline void Location::clear_location() {
  _impl_.location_.ClearToEmpty();
}
inline const std::string& Location::location() const {
  // @@protoc_insertion_point(field_get:BookService.Location.location)
  return _internal_location();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Location::set_location(ArgT0&& arg0, ArgT... args) {
 
 _impl_.location_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:BookService.Location.location)
}
inline std::string* Location::mutable_location() {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:BookService.Location.location)
  return _s;
}
inline const std::string& Location::_internal_location() const {
  return _impl_.location_.Get();
}
inline void Location::_internal_set_location(const std::string& value) {
  
  _impl_.location_.Set(value, GetArenaForAllocation());
}
inline std::string* Location::_internal_mutable_location() {
  
  return _impl_.location_.Mutable(GetArenaForAllocation());
}
inline std::string* Location::release_location() {
  // @@protoc_insertion_point(field_release:BookService.Location.location)
  return _impl_.location_.Release();
}
inline void Location::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  _impl_.location_.SetAllocated(location, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.location_.IsDefault()) {
    _impl_.location_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:BookService.Location.location)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace BookService

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::BookService::BookStateEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BookService::BookStateEnum>() {
  return ::BookService::BookStateEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protobuf_2fBookLibraryService_2eproto
