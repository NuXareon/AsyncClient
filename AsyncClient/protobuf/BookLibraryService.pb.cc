// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/BookLibraryService.proto

#include "protobuf/BookLibraryService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace BookService {
PROTOBUF_CONSTEXPR BookId::BookId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BookIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BookIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BookIdDefaultTypeInternal() {}
  union {
    BookId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BookIdDefaultTypeInternal _BookId_default_instance_;
PROTOBUF_CONSTEXPR BookState::BookState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/{}
  , /*decltype(_impl_.user_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_)*/0} {}
struct BookStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BookStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BookStateDefaultTypeInternal() {}
  union {
    BookState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BookStateDefaultTypeInternal _BookState_default_instance_;
PROTOBUF_CONSTEXPR BookReservation::BookReservation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bookid_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BookReservationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BookReservationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BookReservationDefaultTypeInternal() {}
  union {
    BookReservation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BookReservationDefaultTypeInternal _BookReservation_default_instance_;
PROTOBUF_CONSTEXPR ReturnBook::ReturnBook(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.location_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bookid_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReturnBookDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReturnBookDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReturnBookDefaultTypeInternal() {}
  union {
    ReturnBook _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReturnBookDefaultTypeInternal _ReturnBook_default_instance_;
}  // namespace BookService
static ::_pb::Metadata file_level_metadata_protobuf_2fBookLibraryService_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protobuf_2fBookLibraryService_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_protobuf_2fBookLibraryService_2eproto = nullptr;

const uint32_t TableStruct_protobuf_2fBookLibraryService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BookService::BookId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::BookService::BookId, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::BookService::BookState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::BookService::BookState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::BookService::BookState, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::BookService::BookState, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::BookService::BookState, _impl_.user_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BookService::BookReservation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::BookService::BookReservation, _impl_.bookid_),
  PROTOBUF_FIELD_OFFSET(::BookService::BookReservation, _impl_.user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BookService::ReturnBook, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::BookService::ReturnBook, _impl_.bookid_),
  PROTOBUF_FIELD_OFFSET(::BookService::ReturnBook, _impl_.location_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::BookService::BookId)},
  { 7, 16, -1, sizeof(::BookService::BookState)},
  { 19, -1, -1, sizeof(::BookService::BookReservation)},
  { 27, -1, -1, sizeof(::BookService::ReturnBook)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::BookService::_BookId_default_instance_._instance,
  &::BookService::_BookState_default_instance_._instance,
  &::BookService::_BookReservation_default_instance_._instance,
  &::BookService::_ReturnBook_default_instance_._instance,
};

const char descriptor_table_protodef_protobuf_2fBookLibraryService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!protobuf/BookLibraryService.proto\022\013Boo"
  "kService\"\024\n\006BookId\022\n\n\002id\030\001 \001(\t\"d\n\tBookSt"
  "ate\022)\n\005state\030\001 \001(\0162\032.BookService.BookSta"
  "teEnum\022\020\n\010location\030\002 \003(\t\022\021\n\004user\030\003 \001(\tH\000"
  "\210\001\001B\007\n\005_user\"D\n\017BookReservation\022#\n\006bookI"
  "d\030\001 \001(\0132\023.BookService.BookId\022\014\n\004user\030\002 \001"
  "(\t\"C\n\nReturnBook\022#\n\006bookId\030\001 \001(\0132\023.BookS"
  "ervice.BookId\022\020\n\010location\030\002 \001(\t*=\n\rBookS"
  "tateEnum\022\017\n\013Unavailable\020\000\022\r\n\tAvailable\020\001"
  "\022\014\n\010Reserved\020\0022\350\001\n\013BookLibrary\022>\n\rGetBoo"
  "kStatus\022\023.BookService.BookId\032\026.BookServi"
  "ce.BookState\"\000\022M\n\023MakeBookReservation\022\034."
  "BookService.BookReservation\032\026.BookServic"
  "e.BookState\"\000\022J\n\025ReturnBookReservation\022\027"
  ".BookService.ReturnBook\032\026.BookService.Bo"
  "okState\"\000B\027Z\025protobuff/bookserviceb\006prot"
  "o3"
  ;
static ::_pbi::once_flag descriptor_table_protobuf_2fBookLibraryService_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protobuf_2fBookLibraryService_2eproto = {
    false, false, 642, descriptor_table_protodef_protobuf_2fBookLibraryService_2eproto,
    "protobuf/BookLibraryService.proto",
    &descriptor_table_protobuf_2fBookLibraryService_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_protobuf_2fBookLibraryService_2eproto::offsets,
    file_level_metadata_protobuf_2fBookLibraryService_2eproto, file_level_enum_descriptors_protobuf_2fBookLibraryService_2eproto,
    file_level_service_descriptors_protobuf_2fBookLibraryService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protobuf_2fBookLibraryService_2eproto_getter() {
  return &descriptor_table_protobuf_2fBookLibraryService_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protobuf_2fBookLibraryService_2eproto(&descriptor_table_protobuf_2fBookLibraryService_2eproto);
namespace BookService {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BookStateEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protobuf_2fBookLibraryService_2eproto);
  return file_level_enum_descriptors_protobuf_2fBookLibraryService_2eproto[0];
}
bool BookStateEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class BookId::_Internal {
 public:
};

BookId::BookId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:BookService.BookId)
}
BookId::BookId(const BookId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BookId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:BookService.BookId)
}

inline void BookId::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BookId::~BookId() {
  // @@protoc_insertion_point(destructor:BookService.BookId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BookId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void BookId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BookId::Clear() {
// @@protoc_insertion_point(message_clear_start:BookService.BookId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BookId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "BookService.BookId.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BookId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BookService.BookId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BookService.BookId.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BookService.BookId)
  return target;
}

size_t BookId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BookService.BookId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BookId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BookId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BookId::GetClassData() const { return &_class_data_; }


void BookId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BookId*>(&to_msg);
  auto& from = static_cast<const BookId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:BookService.BookId)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BookId::CopyFrom(const BookId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BookService.BookId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BookId::IsInitialized() const {
  return true;
}

void BookId::InternalSwap(BookId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BookId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protobuf_2fBookLibraryService_2eproto_getter, &descriptor_table_protobuf_2fBookLibraryService_2eproto_once,
      file_level_metadata_protobuf_2fBookLibraryService_2eproto[0]);
}

// ===================================================================

class BookState::_Internal {
 public:
  using HasBits = decltype(std::declval<BookState>()._impl_._has_bits_);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BookState::BookState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:BookService.BookState)
}
BookState::BookState(const BookState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BookState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){from._impl_.location_}
    , decltype(_impl_.user_){}
    , decltype(_impl_.state_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user()) {
    _this->_impl_.user_.Set(from._internal_user(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.state_ = from._impl_.state_;
  // @@protoc_insertion_point(copy_constructor:BookService.BookState)
}

inline void BookState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){arena}
    , decltype(_impl_.user_){}
    , decltype(_impl_.state_){0}
  };
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BookState::~BookState() {
  // @@protoc_insertion_point(destructor:BookService.BookState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BookState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.location_.~RepeatedPtrField();
  _impl_.user_.Destroy();
}

void BookState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BookState::Clear() {
// @@protoc_insertion_point(message_clear_start:BookService.BookState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.location_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.user_.ClearNonDefaultToEmpty();
  }
  _impl_.state_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BookState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .BookService.BookStateEnum state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::BookService::BookStateEnum>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_location();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "BookService.BookState.location"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string user = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_user();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "BookService.BookState.user"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BookState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BookService.BookState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .BookService.BookStateEnum state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  // repeated string location = 2;
  for (int i = 0, n = this->_internal_location_size(); i < n; i++) {
    const auto& s = this->_internal_location(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BookService.BookState.location");
    target = stream->WriteString(2, s, target);
  }

  // optional string user = 3;
  if (_internal_has_user()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BookService.BookState.user");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BookService.BookState)
  return target;
}

size_t BookState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BookService.BookState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string location = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.location_.size());
  for (int i = 0, n = _impl_.location_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.location_.Get(i));
  }

  // optional string user = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  // .BookService.BookStateEnum state = 1;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BookState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BookState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BookState::GetClassData() const { return &_class_data_; }


void BookState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BookState*>(&to_msg);
  auto& from = static_cast<const BookState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:BookService.BookState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.location_.MergeFrom(from._impl_.location_);
  if (from._internal_has_user()) {
    _this->_internal_set_user(from._internal_user());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BookState::CopyFrom(const BookState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BookService.BookState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BookState::IsInitialized() const {
  return true;
}

void BookState::InternalSwap(BookState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.location_.InternalSwap(&other->_impl_.location_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_, lhs_arena,
      &other->_impl_.user_, rhs_arena
  );
  swap(_impl_.state_, other->_impl_.state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BookState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protobuf_2fBookLibraryService_2eproto_getter, &descriptor_table_protobuf_2fBookLibraryService_2eproto_once,
      file_level_metadata_protobuf_2fBookLibraryService_2eproto[1]);
}

// ===================================================================

class BookReservation::_Internal {
 public:
  static const ::BookService::BookId& bookid(const BookReservation* msg);
};

const ::BookService::BookId&
BookReservation::_Internal::bookid(const BookReservation* msg) {
  return *msg->_impl_.bookid_;
}
BookReservation::BookReservation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:BookService.BookReservation)
}
BookReservation::BookReservation(const BookReservation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BookReservation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){}
    , decltype(_impl_.bookid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user().empty()) {
    _this->_impl_.user_.Set(from._internal_user(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_bookid()) {
    _this->_impl_.bookid_ = new ::BookService::BookId(*from._impl_.bookid_);
  }
  // @@protoc_insertion_point(copy_constructor:BookService.BookReservation)
}

inline void BookReservation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){}
    , decltype(_impl_.bookid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BookReservation::~BookReservation() {
  // @@protoc_insertion_point(destructor:BookService.BookReservation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BookReservation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_.Destroy();
  if (this != internal_default_instance()) delete _impl_.bookid_;
}

void BookReservation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BookReservation::Clear() {
// @@protoc_insertion_point(message_clear_start:BookService.BookReservation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.bookid_ != nullptr) {
    delete _impl_.bookid_;
  }
  _impl_.bookid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BookReservation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .BookService.BookId bookId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bookid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "BookService.BookReservation.user"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BookReservation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BookService.BookReservation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .BookService.BookId bookId = 1;
  if (this->_internal_has_bookid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::bookid(this),
        _Internal::bookid(this).GetCachedSize(), target, stream);
  }

  // string user = 2;
  if (!this->_internal_user().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BookService.BookReservation.user");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BookService.BookReservation)
  return target;
}

size_t BookReservation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BookService.BookReservation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user = 2;
  if (!this->_internal_user().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  // .BookService.BookId bookId = 1;
  if (this->_internal_has_bookid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bookid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BookReservation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BookReservation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BookReservation::GetClassData() const { return &_class_data_; }


void BookReservation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BookReservation*>(&to_msg);
  auto& from = static_cast<const BookReservation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:BookService.BookReservation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user().empty()) {
    _this->_internal_set_user(from._internal_user());
  }
  if (from._internal_has_bookid()) {
    _this->_internal_mutable_bookid()->::BookService::BookId::MergeFrom(
        from._internal_bookid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BookReservation::CopyFrom(const BookReservation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BookService.BookReservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BookReservation::IsInitialized() const {
  return true;
}

void BookReservation::InternalSwap(BookReservation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_, lhs_arena,
      &other->_impl_.user_, rhs_arena
  );
  swap(_impl_.bookid_, other->_impl_.bookid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BookReservation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protobuf_2fBookLibraryService_2eproto_getter, &descriptor_table_protobuf_2fBookLibraryService_2eproto_once,
      file_level_metadata_protobuf_2fBookLibraryService_2eproto[2]);
}

// ===================================================================

class ReturnBook::_Internal {
 public:
  static const ::BookService::BookId& bookid(const ReturnBook* msg);
};

const ::BookService::BookId&
ReturnBook::_Internal::bookid(const ReturnBook* msg) {
  return *msg->_impl_.bookid_;
}
ReturnBook::ReturnBook(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:BookService.ReturnBook)
}
ReturnBook::ReturnBook(const ReturnBook& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReturnBook* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.location_){}
    , decltype(_impl_.bookid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location().empty()) {
    _this->_impl_.location_.Set(from._internal_location(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_bookid()) {
    _this->_impl_.bookid_ = new ::BookService::BookId(*from._impl_.bookid_);
  }
  // @@protoc_insertion_point(copy_constructor:BookService.ReturnBook)
}

inline void ReturnBook::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.location_){}
    , decltype(_impl_.bookid_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReturnBook::~ReturnBook() {
  // @@protoc_insertion_point(destructor:BookService.ReturnBook)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReturnBook::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.location_.Destroy();
  if (this != internal_default_instance()) delete _impl_.bookid_;
}

void ReturnBook::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReturnBook::Clear() {
// @@protoc_insertion_point(message_clear_start:BookService.ReturnBook)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.location_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.bookid_ != nullptr) {
    delete _impl_.bookid_;
  }
  _impl_.bookid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReturnBook::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .BookService.BookId bookId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bookid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_location();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "BookService.ReturnBook.location"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReturnBook::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BookService.ReturnBook)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .BookService.BookId bookId = 1;
  if (this->_internal_has_bookid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::bookid(this),
        _Internal::bookid(this).GetCachedSize(), target, stream);
  }

  // string location = 2;
  if (!this->_internal_location().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BookService.ReturnBook.location");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_location(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BookService.ReturnBook)
  return target;
}

size_t ReturnBook::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BookService.ReturnBook)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string location = 2;
  if (!this->_internal_location().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location());
  }

  // .BookService.BookId bookId = 1;
  if (this->_internal_has_bookid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bookid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReturnBook::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReturnBook::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReturnBook::GetClassData() const { return &_class_data_; }


void ReturnBook::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReturnBook*>(&to_msg);
  auto& from = static_cast<const ReturnBook&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:BookService.ReturnBook)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_location().empty()) {
    _this->_internal_set_location(from._internal_location());
  }
  if (from._internal_has_bookid()) {
    _this->_internal_mutable_bookid()->::BookService::BookId::MergeFrom(
        from._internal_bookid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReturnBook::CopyFrom(const ReturnBook& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BookService.ReturnBook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnBook::IsInitialized() const {
  return true;
}

void ReturnBook::InternalSwap(ReturnBook* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.location_, lhs_arena,
      &other->_impl_.location_, rhs_arena
  );
  swap(_impl_.bookid_, other->_impl_.bookid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReturnBook::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protobuf_2fBookLibraryService_2eproto_getter, &descriptor_table_protobuf_2fBookLibraryService_2eproto_once,
      file_level_metadata_protobuf_2fBookLibraryService_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace BookService
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::BookService::BookId*
Arena::CreateMaybeMessage< ::BookService::BookId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BookService::BookId >(arena);
}
template<> PROTOBUF_NOINLINE ::BookService::BookState*
Arena::CreateMaybeMessage< ::BookService::BookState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BookService::BookState >(arena);
}
template<> PROTOBUF_NOINLINE ::BookService::BookReservation*
Arena::CreateMaybeMessage< ::BookService::BookReservation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BookService::BookReservation >(arena);
}
template<> PROTOBUF_NOINLINE ::BookService::ReturnBook*
Arena::CreateMaybeMessage< ::BookService::ReturnBook >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BookService::ReturnBook >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
