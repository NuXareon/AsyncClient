// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: protobuf/BookLibraryService.proto

package bookservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookLibraryClient is the client API for BookLibrary service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookLibraryClient interface {
	GetBookStatus(ctx context.Context, in *BookId, opts ...grpc.CallOption) (*BookState, error)
	MakeBookReservation(ctx context.Context, in *BookReservation, opts ...grpc.CallOption) (*BookState, error)
	ReturnBookReservation(ctx context.Context, in *ReturnBook, opts ...grpc.CallOption) (*BookState, error)
}

type bookLibraryClient struct {
	cc grpc.ClientConnInterface
}

func NewBookLibraryClient(cc grpc.ClientConnInterface) BookLibraryClient {
	return &bookLibraryClient{cc}
}

func (c *bookLibraryClient) GetBookStatus(ctx context.Context, in *BookId, opts ...grpc.CallOption) (*BookState, error) {
	out := new(BookState)
	err := c.cc.Invoke(ctx, "/BookService.BookLibrary/GetBookStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookLibraryClient) MakeBookReservation(ctx context.Context, in *BookReservation, opts ...grpc.CallOption) (*BookState, error) {
	out := new(BookState)
	err := c.cc.Invoke(ctx, "/BookService.BookLibrary/MakeBookReservation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookLibraryClient) ReturnBookReservation(ctx context.Context, in *ReturnBook, opts ...grpc.CallOption) (*BookState, error) {
	out := new(BookState)
	err := c.cc.Invoke(ctx, "/BookService.BookLibrary/ReturnBookReservation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookLibraryServer is the server API for BookLibrary service.
// All implementations must embed UnimplementedBookLibraryServer
// for forward compatibility
type BookLibraryServer interface {
	GetBookStatus(context.Context, *BookId) (*BookState, error)
	MakeBookReservation(context.Context, *BookReservation) (*BookState, error)
	ReturnBookReservation(context.Context, *ReturnBook) (*BookState, error)
	mustEmbedUnimplementedBookLibraryServer()
}

// UnimplementedBookLibraryServer must be embedded to have forward compatible implementations.
type UnimplementedBookLibraryServer struct {
}

func (UnimplementedBookLibraryServer) GetBookStatus(context.Context, *BookId) (*BookState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookStatus not implemented")
}
func (UnimplementedBookLibraryServer) MakeBookReservation(context.Context, *BookReservation) (*BookState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeBookReservation not implemented")
}
func (UnimplementedBookLibraryServer) ReturnBookReservation(context.Context, *ReturnBook) (*BookState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnBookReservation not implemented")
}
func (UnimplementedBookLibraryServer) mustEmbedUnimplementedBookLibraryServer() {}

// UnsafeBookLibraryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookLibraryServer will
// result in compilation errors.
type UnsafeBookLibraryServer interface {
	mustEmbedUnimplementedBookLibraryServer()
}

func RegisterBookLibraryServer(s grpc.ServiceRegistrar, srv BookLibraryServer) {
	s.RegisterService(&BookLibrary_ServiceDesc, srv)
}

func _BookLibrary_GetBookStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookLibraryServer).GetBookStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BookService.BookLibrary/GetBookStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookLibraryServer).GetBookStatus(ctx, req.(*BookId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookLibrary_MakeBookReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookReservation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookLibraryServer).MakeBookReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BookService.BookLibrary/MakeBookReservation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookLibraryServer).MakeBookReservation(ctx, req.(*BookReservation))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookLibrary_ReturnBookReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnBook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookLibraryServer).ReturnBookReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BookService.BookLibrary/ReturnBookReservation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookLibraryServer).ReturnBookReservation(ctx, req.(*ReturnBook))
	}
	return interceptor(ctx, in, info, handler)
}

// BookLibrary_ServiceDesc is the grpc.ServiceDesc for BookLibrary service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookLibrary_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BookService.BookLibrary",
	HandlerType: (*BookLibraryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBookStatus",
			Handler:    _BookLibrary_GetBookStatus_Handler,
		},
		{
			MethodName: "MakeBookReservation",
			Handler:    _BookLibrary_MakeBookReservation_Handler,
		},
		{
			MethodName: "ReturnBookReservation",
			Handler:    _BookLibrary_ReturnBookReservation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/BookLibraryService.proto",
}
